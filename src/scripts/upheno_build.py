import click
import os
import logging
import pandas as pd
from typing import List
from lib import (
    uPhenoConfig,
    download_patterns as dl_patterns,
    compute_upheno_stats,
    create_upheno_sssom,
    export_merged_tsvs_for_combination,
    postprocess_modified_patterns as pp_modified_patterns,
    obsolete_classes_from_autogenerated_upheno_tsvs,
    add_upheno_ids_to_fillers_and_filter_out_bfo,
    LexicalMapping,
)

# Setup logging configuration
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@click.group()
@click.option('--verbose', is_flag=True, help='Enable verbose mode')
@click.pass_context
def upheno(ctx, verbose):
    """Main CLI for upheno"""
    ctx.ensure_object(dict)
    ctx.obj['VERBOSE'] = verbose
    if verbose:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.debug("Verbose mode is on")
    else:
        logger.info("Running in normal mode")


# Subcommand: prepare_patterns
@upheno.command()
@click.option('--patterns-directory', help='Output file for SSSOM')
@click.option('--fillers-directory')
@click.option('--tmp-directory')
@click.option('--output-directory')
@click.option('--merged-imports')
@click.option('--upheno-config', help='uPheno config file')
def add_upheno_ids_to_fillers(patterns_directory, fillers_directory, tmp_directory,
                              output_directory, merged_imports, upheno_config):
    """Prepare pattern files for upheno"""
    logger.debug(f'Adding uPheno IDs to fillers and writing to {fillers_directory}')
    click.echo('Adding uPheno IDs to fillers...')
    config = uPhenoConfig(upheno_config)
    oids = config.get_upheno_profile_components("all")
    upheno_prefix = "http://purl.obolibrary.org/obo/UPHENO_"
    upheno_map = pd.read_csv(config.get_upheno_id_map(), sep="\t")

    blacklisted_upheno_ids_path = os.path.join(tmp_directory, "blacklisted_upheno_iris.txt")

    # Do not use these Upheno IDs
    with open(blacklisted_upheno_ids_path) as f:
        blacklisted_upheno_ids = f.read().splitlines()

    upheno_map = add_upheno_ids_to_fillers_and_filter_out_bfo(
            pattern_dir=patterns_directory,
            upheno_map=upheno_map,
            blacklisted_upheno_ids=blacklisted_upheno_ids,
            upheno_config=config,
            upheno_fillers_dir=fillers_directory,
            upheno_prefix=upheno_prefix)

    upheno_map = upheno_map.drop_duplicates()
    upheno_map.sort_values("defined_class", inplace=True)
    upheno_map.to_csv(config.get_upheno_id_map(), sep="\t", index=False)

    export_merged_tsvs_for_combination(merged_tsv_dir=output_directory,
                                       oids=oids,
                                       pattern_dir=patterns_directory,
                                       upheno_fillers_dir=fillers_directory,
                                       legal_fillers=config.get_legal_fillers(),
                                       upheno_id_map=config.get_upheno_id_map())

@upheno.command()
@click.option('--dosdp-tsv-directory')
@click.option('--obsolete-fillers-file')
@click.option('--to-obsolete-entities-file')
@click.option('--upheno-id-map')
@click.option('--obsoleted-template')
def obsolete_classes_from_tsvs(
        dosdp_tsv_directory,
        obsolete_fillers_file,
        to_obsolete_entities_file,
        upheno_id_map,
        obsoleted_template):
    """Obsolete classes from dosdp pattern tsvs"""
    logger.debug(f'Obsoleting uPheno classes in {dosdp_tsv_directory}')
    click.echo(f'Obsoleting uPheno classes in {dosdp_tsv_directory}')
    obsolete_classes_from_autogenerated_upheno_tsvs(
        tsv_directory=dosdp_tsv_directory,
        obsolete_fillers_file=obsolete_fillers_file,
        to_obsolete_entities_file=to_obsolete_entities_file,
        upheno_id_map_file=upheno_id_map,
        obsoleted_template=obsoleted_template
    )


@upheno.command()
@click.option('--patterns-directory')
@click.option('--fillers-directory')
@click.option('--upheno-config', help='uPheno config file')
def postprocess_modified_patterns(patterns_directory, fillers_directory, upheno_config):
    """Prepare pattern files for upheno"""
    logger.debug(f'Adding uPheno IDs to fillers and writing to {fillers_directory}')
    click.echo('Adding uPheno IDs to fillers...')
    config = uPhenoConfig(upheno_config)

    modified_patterns_to_process = [
        os.path.join(patterns_directory, f)
        for f in os.listdir(patterns_directory)
        if os.path.isfile(os.path.join(patterns_directory, f)) and f.endswith("-modified.yaml")
    ]

    pp_modified_patterns(
        upheno_config=config,
        pattern_files=modified_patterns_to_process,
        matches_dir=fillers_directory
    )


# Subcommand: create_sssom
@upheno.command()
@click.option('--upheno-id-map', help='Output file for SSSOM')
@click.option('--patterns-dir', help='Output file for SSSOM')
@click.option('--matches-dir', help='Output file for SSSOM')
@click.option('--anatomy-mappings', help='Anatomy ontology mappings in SSSOM TSV format')
@click.option('--obsolete-file-tsv', help='Obsolete TSV template file for uPheno')
@click.option('--output-file-tsv', help='Output file for SSSOM')
@click.option('--output-file-owl', help='Output file for SSSOM')
def create_species_independent_sssom_mappings(upheno_id_map, patterns_dir, matches_dir, anatomy_mappings, obsolete_file_tsv, 
                                              output_file_tsv, output_file_owl):
    """Create SSSOM file from upheno id map and pattern matches"""
    logger.debug(f'Creating species-neutral SSSOM mappings: {output_file_tsv} and writing to {output_file_owl}')
    click.echo('Creating SSSOM...')
    create_upheno_sssom(upheno_id_map, patterns_dir, matches_dir, anatomy_mappings, obsolete_file_tsv, output_file_tsv, output_file_owl)


# Subcommand: validate_mappings
@upheno.command()
@click.option('--upheno-config', help='uPheno config file')
@click.option('--pattern-directory', help='Pattern directory to download to.')
def download_patterns(upheno_config, pattern_directory):
    """Validate the mappings"""
    logger.debug(f'Download uPheno Patterns to {pattern_directory}.')
    click.echo('Download uPheno Patterns...')
    config = uPhenoConfig(upheno_config)
    dl_patterns(upheno_pattern_repos=config.get_pattern_repos(),
                pattern_dir=pattern_directory, upheno_config=config)


@upheno.command()
@click.option('--upheno-config', help='uPheno config file')
@click.option('--pattern-directory', help='Pattern directory to download to.')
@click.option('--stats-directory', help='Pattern directory to download to.')
@click.option('--matches-directory', help='Pattern directory to download to.')
def compute_upheno_statistics(upheno_config, pattern_directory, stats_directory, matches_directory):
    """Validate the mappings"""
    logger.debug(f'Compute uPheno statistics.')
    click.echo('Computing uPheno statistics...')
    upheno_config = uPhenoConfig(upheno_config)
    os.environ["ROBOT_JAVA_ARGS"] = upheno_config.get_robot_java_args()
    compute_upheno_stats(upheno_config=upheno_config,
                         pattern_dir=pattern_directory,
                         matches_dir=matches_directory,
                         stats_dir=stats_directory)


# Subcommand: help
@upheno.command()
@click.pass_context
def show_help(ctx):
    """Show this message and exit"""
    click.echo(ctx.parent.get_help())


if __name__ == '__main__':
    upheno()
