package monarch.ebi.phenotype.utils;

import monarch.ebi.phenotype.utils.violations.EQViolation;
import monarch.ebi.phenotype.utils.violations.PhysicalQualityInheresInProcessViolation;
import monarch.ebi.phenotype.utils.violations.ProcessPhenotypeSublassMEPhenotype;
import org.apache.commons.io.FileUtils;
import org.semanticweb.elk.owlapi.ElkReasonerFactory;
import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.*;
import org.semanticweb.owlapi.reasoner.OWLReasoner;

import java.io.File;
import java.io.IOException;
import java.util.*;

/**
 * Hello world!
 */
public class EQAnalyserApp {
    private final Set<OWLClass> phenotypes = new HashSet<>();
    private final Set<EQViolation> eq_violations = new HashSet<>();
    private final File ontology_file;
    private final File ontology_dir_out;
    private static OWLDataFactory df = OWLManager.getOWLDataFactory();
    private RenderManager ren = RenderManager.getInstance();


    private EQAnalyserApp(File ontology_file, File ontology_dir_out, File phenotype_list_file) throws IOException, OWLOntologyCreationException {
        this.ontology_file = ontology_file;
        this.ontology_dir_out = ontology_dir_out;
        if(phenotype_list_file.exists()) {
            FileUtils.readLines(phenotype_list_file, "utf-8").forEach(e -> phenotypes.add(df.getOWLClass(IRI.create(e))));
        }
        run();
    }

    private void run() throws IOException, OWLOntologyCreationException {
        OWLOntologyManager man = OWLManager.createOWLOntologyManager();
        OWLOntology o = man.loadOntology(IRI.create(ontology_file));
        RenderManager.getInstance().addLabel(o);
        OWLReasoner elk = new ElkReasonerFactory().createReasoner(o);
        preparePhenotypes(elk,o);
        log("Phenotypes: "+phenotypes.size());
        eq_violations.add(new PhysicalQualityInheresInProcessViolation(elk));
        eq_violations.add(new ProcessPhenotypeSublassMEPhenotype(elk,phenotypes));
        Map<String,Map<OWLClassExpression,String>> ordered_report = new HashMap<>();
        for(EQViolation violation:eq_violations) {
            for(OWLClass p:phenotypes) {
                OWLClassExpression eq = OntologyUtils.getEQ(o,p);
                if(eq!=null) {
                    violation.violatedBy(eq);
                    Map<String, String> rep = violation.report(eq);
                    for(String key:rep.keySet()) {
                        String val = rep.get(key);
                        if(!ordered_report.containsKey(key)) {
                            ordered_report.put(key,new HashMap<>());
                        }
                        ordered_report.get(key).put(p,val);
                    }
                }
            }
        }

        for(String violation:ordered_report.keySet()) {
            List<String> report = new ArrayList<>();
            report.add("## "+violation);
            Map<OWLClassExpression, String> rec = ordered_report.get(violation);
            for(OWLClassExpression ce:rec.keySet()) {
                report.add("* "+RenderManager.getInstance().renderForMarkdown(ce));
                report.add("    * "+rec.get(ce));
            }
            report.add("");
            report.add("Report generated by monarch.ebi.phenotype.utils.EQAnalyserApp");
            FileUtils.writeLines(new File(ontology_dir_out,"eq_analysis_report_"+violation+".md"),report);
        }

    }

    private void preparePhenotypes(OWLReasoner elk,OWLOntology o) {
        if(phenotypes.isEmpty()) {
            for(OWLClass cl:elk.getSubClasses(Entities.phenotype,false).getFlattened()) {
                if(OntologyUtils.getEQ(o,cl)!=null) {
                    if(elk.isSatisfiable(cl)) {
                        phenotypes.add(cl);
                    }
                }
            }
        }
    }

    private void log(Object o) {
        System.out.println(o.toString());
    }


    public static void main(String[] args) throws OWLOntologyCreationException, IOException {
		/*
        String ontology_path = args[0];
        String ontology_path_out = args[1];
        String phenotype_list = args[2];
        */
        String ontology_path = "/Users/matentzn/data/mp.owl";
        String dir_path_out = "/Users/matentzn/ws/upheno-dev/src/curation/qc";
        String phenotype_list = "";

        File ontology_file = new File(ontology_path);
        File ontology_dir_out = new File(dir_path_out);
        File phenotype_list_file = new File(phenotype_list);

        new EQAnalyserApp(ontology_file, ontology_dir_out, phenotype_list_file);
    }

}
